{"name":"Mark Sturgill","tagline":"","body":"### PowerDNS DNSSEC Authoritative Nameserver\r\nInstall dependencies (varies with environment):\r\n\r\n```sh\r\naptitude install build-essential libboost-dev libboost-program-options-dev libboost-serialization-dev libbotan1.10-dev libmysqlclient-dev\r\n```\r\n\r\nExtract and enter source directory:\r\n\r\n```sh\r\nwget http://downloads.powerdns.com/releases/pdns-3.2.tar.gz\r\ntar zxf pdns-3.2.tar.gz\r\ncd pdns-3.2/\r\n```\r\n\r\nConfigure, build, and install:\r\n\r\n```sh\r\n./configure --prefix=/opt/pdns --enable-pdns_server --enable-botan1.10 --without-system-polarssl --without-lua --with-modules=\"gmysql\"\r\nmake && make install\r\n```\r\n\r\nEnter a MySQL instance and create the necessary database, user, and tables:\r\n\r\n```sql\r\nmysql> create database pdns;\r\nQuery OK, 1 row affected (0.00 sec)\r\nmysql> grant all on pdns.* to pdns@localhost identified by 'password';\r\nQuery OK, 0 rows affected (0.00 sec)\r\nmysql> use pdns;\r\nDatabase changed\r\n\r\ncreate table domains (\r\n id INT auto_increment,\r\n name VARCHAR(255) NOT NULL,\r\n master VARCHAR(128) DEFAULT NULL,\r\n last_check INT DEFAULT NULL,\r\n type VARCHAR(6) NOT NULL,\r\n notified_serial INT DEFAULT NULL, \r\n account VARCHAR(40) DEFAULT NULL,\r\n primary key (id)\r\n) Engine=InnoDB;\r\nCREATE UNIQUE INDEX name_index ON domains(name);\r\nCREATE TABLE records (\r\n id INT auto_increment,\r\n domain_id INT DEFAULT NULL,\r\n name VARCHAR(255) DEFAULT NULL,\r\n type VARCHAR(10) DEFAULT NULL,\r\n content VARCHAR(64000) DEFAULT NULL,\r\n ttl INT DEFAULT NULL,\r\n prio INT DEFAULT NULL,\r\n change_date INT DEFAULT NULL,\r\n primary key(id),\r\n CONSTRAINT `records_ibfk_1` FOREIGN KEY (`domain_id`) REFERENCES `domains` (`id`) ON DELETE CASCADE\r\n) Engine=InnoDB;\r\nCREATE INDEX rec_name_index ON records(name);\r\nCREATE INDEX nametype_index ON records(name,type);\r\nCREATE INDEX domain_id ON records(domain_id);\r\ncreate table supermasters (\r\n ip VARCHAR(25) NOT NULL, \r\n nameserver VARCHAR(255) NOT NULL, \r\n account VARCHAR(40) DEFAULT NULL\r\n) Engine=InnoDB;\r\ncreate table domainmetadata (\r\n id INT auto_increment,\r\n domain_id INT NOT NULL,\r\n kind VARCHAR(16),\r\n content TEXT,\r\n primary key(id)\r\n);\r\ncreate index domainmetaidindex on domainmetadata(domain_id);               \r\ncreate table cryptokeys (\r\n id INT auto_increment,\r\n domain_id INT NOT NULL,\r\n flags INT NOT NULL,\r\n active BOOL,\r\n content TEXT,\r\n primary key(id)\r\n);\r\ncreate index domainidindex on cryptokeys(domain_id);           \r\nalter table records add ordername VARCHAR(255) BINARY;\r\nalter table records add auth bool;\r\ncreate index recordorder on records (domain_id, ordername);\r\ncreate table tsigkeys (\r\n id INT auto_increment,\r\n name VARCHAR(255), \r\n algorithm VARCHAR(50),\r\n secret VARCHAR(255),\r\n primary key(id)\r\n);\r\ncreate unique index namealgoindex on tsigkeys(name, algorithm);\r\nalter table records change column type type VARCHAR(10);\r\n```\r\n\r\nWhen finished with MySQL operations, flush privileges:\r\n\r\n```sql\r\nmysql> flush privileges;\r\nQuery OK, 0 rows affected (0.00 sec)\r\n```\r\n\r\nEdit the stock PowerDNS configuration file /opt/pdns/etc/pdns.conf-dist and save it as /opt/pdns/etc/pdns.conf. The following changes are a guideline:\r\n\r\n```\r\ndaemon=yes\r\nmaster=yes\r\nlaunch=gmysql\r\ngmysql-dnssec\r\ngmysql-socket=/var/run/mysqld/mysqld.sock\r\n#gmysql-host=localhost\r\ngmysql-user=pdns\r\ngmysql-password=secret\r\ngmysql-dbname=pdns\r\n```\r\n\r\nPowerDNS creates an init script as part of its build process. You can install it on a Debian based system by doing the following:\r\n\r\n```sh\r\ncp /opt/pdns-3.2/pdns/pdns /etc/init.d/\r\nupdate-rc.d pdns defaults\r\n```\r\n\r\nIf you wish to remove it:\r\n\r\n```sh\r\nupdate-rc.d -f pdns remove\r\nrm /etc/init.d/pdns\r\n```\r\n\r\nStart the PowerDNS server:\r\n\r\n```sh\r\nservice pdns start\r\n```\r\n\r\nCreate a domain and associated records in the database:\r\n\r\n```sql\r\ninsert into domains (name, type) values ('example.com','MASTER');\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','localhost dns@example.com 0', 'SOA', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','203.0.113.1', 'A', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','2001:DB8:1:1::1', 'AAAA', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'www.example.com','example.com', 'CNAME', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'ns1.example.com','203.0.113.1', 'A', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'ns1.example.com','2001:DB8:1:1::1', 'AAAA', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'ns2.example.com','192.0.2.2', 'A', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'ns2.example.com','2001:DB8::2', 'AAAA', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','ns1.example.com', 'NS', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','ns2.example.com', 'NS', 86400);\r\n```\r\n\r\nCreate MX, SPF, and DKIM records. If you are using Google Apps, you will likely want records similar to the following:\r\n\r\n```sql\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'google._domainkey.example.com','v=DKIM1; k=rsa; p=dkim-key', 'TXT', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','v=spf1 include:_spf.google.com ~all', 'TXT', 86400);\r\ninsert into records (domain_id, name, content, type, ttl) values (1, 'example.com','google-site-verification=site-verification-key', 'TXT', 86400);\r\ninsert into records (domain_id, name, content, type, ttl, prio) values (1, 'example.com','ASPMX.L.GOOGLE.COM', 'MX', 86400, 1);\r\ninsert into records (domain_id, name, content, type, ttl, prio) values (1, 'example.com','ALT1.ASPMX.L.GOOGLE.COM', 'MX', 86400, 5);\r\ninsert into records (domain_id, name, content, type, ttl, prio) values (1, 'example.com','ALT2.ASPMX.L.GOOGLE.COM', 'MX', 86400, 5);\r\ninsert into records (domain_id, name, content, type, ttl, prio) values (1, 'example.com','ASPMX2.GOOGLEMAIL.COM', 'MX', 86400, 10);\r\ninsert into records (domain_id, name, content, type, ttl, prio) values (1, 'example.com','ASPMX3.GOOGLEMAIL.COM', 'MX', 86400, 10);\r\n```\r\n\r\nAllow slaves to AXFR your domain:\r\n\r\n```sql\r\ninsert into domainmetadata (domain_id, kind, content) values (1, 'ALLOW-AXFR-FROM','192.0.2.2');\r\ninsert into domainmetadata (domain_id, kind, content) values (1, 'ALLOW-AXFR-FROM','2001:DB8::2');\r\n```\r\n\r\nUsing 0 as the serial in the SOA above has PowerDNS generate the serial as needed. INCEPTION-EPOCH modifies that generation to use the greater of the last modified time or the time of the current signing period.\r\n\r\n```sql\r\ninsert into domainmetadata (domain_id, kind, content) values (1, 'SOA-EDIT','INCEPTION-EPOCH');\r\nupdate records set change_date = unix_timestamp() where domain_id = 1;\r\n```\r\n\r\nActivate DNSSEC and NSEC3:\r\n\r\n```sh\r\n/opt/pdns/bin/pdnssec secure-zone example.com\r\n/opt/pdns/bin/pdnssec set-nsec3 example.com\r\n/opt/pdns/bin/pdnssec rectify-zone example.com\r\n```\r\n\r\nView DS records and update them with the domain's registrar:\r\n\r\n```sh\r\n/opt/pdns/bin/pdnssec show-zone example.com\r\n```\r\n\r\n### strongSwan IKEv2 IPSec VPN\r\nInstall build tools and prerequisites (varies with environment):\r\n\r\n```sh\r\naptitude install build-essential libgmp3-dev libssl-dev libcurl4-gnutls-dev\r\n```\r\n\r\nFetch source, extract, configure, and build. There are extensive build options available. strongSwan is installed to /opt/strongswan:\r\n\r\n```sh\r\ncd /opt\r\nwget http://download.strongswan.org/strongswan-5.1.1.tar.bz2\r\ntar jxf strongswan-5.1.1.tar.bz2\r\ncd strongswan-5.1.1/\r\n./configure --prefix=/opt/strongswan --enable-md4 --enable-eap-md5 --enable-eap-gtc --enable-eap-tls --enable-eap-ttls --enable-eap-peap --enable-eap-mschapv2 --enable-eap-identity --enable-ikev2 --enable-openssl --enable-curl --enable-af-alg\r\nmake && make install\r\ncd /opt/strongswan/etc\r\n```\r\n\r\nModify the three basic configuration files as necessary.\r\n\r\n```\r\n# ipsec.conf\r\nconfig setup\r\nconn %default\r\n    keyexchange=ikev2\r\n    ike=aes256-sha1-modp1024!\r\n    esp=aes256-sha1!\r\n    dpdaction=clear\r\n    dpddelay=300s\r\n    rekey=no\r\nconn windows\r\n    left=%any\r\n    leftsubnet=0.0.0.0/0\r\n    leftauth=pubkey\r\n    leftcert=vpnCert.der\r\n    leftid=@vpn.example.com\r\n    right=%any\r\n    rightsourceip=172.16.16.0/24\r\n    rightauth=eap-mschapv2\r\n    rightsendcert=never\r\n    eap_identity=%any\r\n    auto=add\r\n\r\n# ipsec.secrets\r\n: RSA vpnKey.der\r\nusername : EAP \"password\"\r\n\r\n# strongswan.conf\r\ncharon {\r\n    dns1 = 8.8.4.4\r\n    dns2 = 8.8.8.8\r\n}\r\n```\r\n\r\nCreate basic PKI (CA and server certificate). The following commands need to be modified slightly to suit your environment. This process easier if you have an actual domain to use. You can use hostnames and modify the hosts file on clients if necessary.\r\n\r\n```sh\r\n/opt/strongswan/sbin/ipsec pki --gen > /opt/strongswan/etc/ipsec.d/private/caKey.der\r\n/opt/strongswan/sbin/ipsec pki --self --in /opt/strongswan/etc/ipsec.d/private/caKey.der --dn \"C=US, O=YourORG, CN=YourORG CA\" --ca > /opt/strongswan/etc/ipsec.d/cacerts/caCert.der\r\n/opt/strongswan/sbin/ipsec pki --gen > /opt/strongswan/etc/ipsec.d/private/vpnKey.der\r\n/opt/strongswan/sbin/ipsec pki --pub --in /opt/strongswan/etc/ipsec.d/private/vpnKey.der | /opt/strongswan/sbin/ipsec pki --issue --cacert /opt/strongswan/etc/ipsec.d/cacerts/caCert.der --cakey caKey.der --dn \"C=US, O=YourORG, CN=vpn.example.com\" --san vpn.example.com --flag serverAuth --flag ikeIntermediate > /opt/strongswan/etc/ipsec.d/certs/vpnCert.der\r\n```\r\n\r\nYou'll need to copy your CA to your Windows clients and import it. You'll have to use the 'Certificates' MMC snap-in. There is an overview and screenshots of this process here. It is easier to copy and paste base64. The following will convert your certificate into a format that is easier to shuffle around.\r\n\r\n```sh\r\nopenssl x509 -inform der -in caCert.der -out caCert.pem\r\n```\r\n\r\nEnsure IP forwarding is enabled.\r\n\r\n```sh\r\n# /etc/sysctl.conf\r\nnet.ipv4.ip_forward=1\r\nsysctl -p /etc/sysctl.conf\r\n```\r\n\r\nNAT traffic originating from VPN clients.\r\n\r\n```sh\r\niptables -t nat -A POSTROUTING -s 172.16.16.0/24 -o eth0 -j MASQUERADE\r\n```\r\n\r\nStart strongSwan.\r\n\r\n```sh\r\n/opt/strongswan/sbin/ipsec start\r\n```\r\n\r\n**Additional References:**\r\n* http://wiki.strongswan.org/projects/strongswan/wiki/Windows7\r\n* http://wiki.strongswan.org/projects/strongswan/wiki/Win7CertReq\r\n* http://wiki.strongswan.org/projects/strongswan/wiki/Win7EapCert\r\n* http://wiki.strongswan.org/projects/strongswan/wiki/IKEv2Examples \r\n* http://wiki.strongswan.org/projects/strongswan/wiki/UserDocumentation \r\n* http://wiki.strongswan.org/projects/strongswan/wiki/Autoconf","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}